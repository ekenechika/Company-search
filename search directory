#include <iostream>
#include <string>
#include <vector>

class Employee {
public:
    Employee(const std::string& name, int id, const std::string& department, int officeNumber)
        : name(name), id(id), department(department), officeNumber(officeNumber) {}

    void displayInfo() const {
        std::cout << name << ", #" << id << ", works in the " << department << " department in office " << officeNumber << "." << std::endl;
    }

    int getID() const { return id; }

    const std::string& getName() const { return name; }

    const std::string& getDepartment() const { return department; }

    int getOfficeNumber() const { return officeNumber; }

private:
    std::string name;
    int id;
    std::string department;
    int officeNumber;
};

int main() {
    std::vector<Employee> employees;

    while (true) {
        std::cout << "Choose an option:" << std::endl;
        std::cout << "1) Add a new Employee" << std::endl;
        std::cout << "2) Look up Employee" << std::endl;
        std::cout << "3) List a Department" << std::endl;
        std::cout << "4) List offices on Floor" << std::endl;

        int choice;
        std::cin >> choice;

        if (choice == 1) {
            std::cin.ignore(); // Ignore any remaining newline characters
            std::string name, department;
            int id, officeNumber;

            std::cout << "Enter employee name: ";
            std::getline(std::cin, name);
            std::cout << "Enter employee ID number: ";
            std::cin >> id;
            std::cin.ignore(); // Ignore the newline character
            std::cout << "Enter department name: ";
            std::getline(std::cin, department);
            std::cout << "Enter office number: ";
            std::cin >> officeNumber;

            employees.push_back(Employee(name, id, department, officeNumber));

            std::cout << "Added: " << name << ", #" << id << ", works in the " << department << " department in office " << officeNumber << "." << std::endl;
        } else if (choice == 2) {
            int idToLookup;
            std::cout << "Enter ID number: ";
            std::cin >> idToLookup;

            bool found = false;
            for (const auto& employee : employees) {
                if (employee.getID() == idToLookup) {
                    employee.displayInfo();
                    found = true;
                    break;
                }
            }

            if (!found) {
                std::cout << "Employee with ID #" << idToLookup << " not found." << std::endl;
            }
        } else if (choice == 3) {
            std::cin.ignore(); // Ignore any remaining newline characters
            std::string departmentToLookup;
            std::cout << "Enter department name: ";
            std::getline(std::cin, departmentToLookup);

            std::cout << "The following employees work in the " << departmentToLookup << " department:" << std::endl;
            for (const auto& employee : employees) {
                if (employee.getDepartment() == departmentToLookup) {
                    employee.displayInfo();
                }
            }
        } else if (choice == 4) {
            int floorToLookup;
            std::cout << "Enter floor number: ";
            std::cin >> floorToLookup;

            std::cout << "The following employees work on Floor " << floorToLookup << ":" << std::endl;
            for (const auto& employee : employees) {
                if (employee.getOfficeNumber() / 100 == floorToLookup) {
                    employee.displayInfo();
                }
            }
        } else {
            std::cout << "Invalid choice. Please try again." << std::endl;
        }
    }

    return 0;
}
